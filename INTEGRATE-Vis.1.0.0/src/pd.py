import sys, subprocess
import pd_sub as pd
import getopt
import os
import gene_list
import time

# example: python pd.py -f file_list.tsv -5 ENSG00000184012 -3 ENSG00000157554 -s 3 -o 'plots/pd.pdf'


def usage():
    print """
    panel_d -f <sample-tumor-fusion-table> -e <expression-table> -5 <five_p_gene_ID> -3 <three_p_gene_ID> -s <sorting-mode> -g <gene-model> -o <output-dir>
    Parameters:
        -f/--sample-tumor-fusion-table [Requested]
                                   [string:   cufflinks files directories and sample type in tsv format                 ]
        -e/--expression-table      [Requested]
                                   [expression table generated by expression converter                                  ]
        -5/--five_p_gene_ID        [Requested]
                                   [string:   five_p_gene_ID.                                                           ]
        -3/--three_p_gene_ID       [Requested]
                                   [string:   three_p_gene_ID.                                                          ] 
        -g/--gene-model            [Requested]
                                   [string:   gtf gene model                                                            ] 
        -t/--text-of-expression    [Optional]
                                   [string: such as FPKM                                                                ]
        -y/--y-mode                [Optional]
                                   [string:   dependent or independent          Default: independent                    ]
        -r/--range                 [Optional]
                                   [number:   maximum value of the range of expression to plot                          ]    
        -s/--sorting-mode          [Optional]
                                   [string:   sort by which gene.   5 or 3 or 0 (0 means autamatically choosing 5 or 3) ]
        -w/--write-to-screen       [Optional]
                                   [      :   print sorted samples to screen                                            ] 
        -o/--output-dir            [Optional]
                                   [string:   output directory.                                                         ]

    Version:                       1.0.0
          """

#parameters

write_sort = False

#requested:
file_dir=''
five_prime_ID=''
three_prime_ID=''
gene_model = ''

exp_table = ''

#optional:
outputDir='./'
sort_mode=0
exp_text = 'Expression'
y_mode = 'independent'
max_value = -10000.0

def rm_quoat(aa):
    if aa[0]=='\"' and aa[len(aa)-1]==";":
        return aa[1:len(aa)-2]
    else:
        return aa

def getParameters(argv):
    try:
        opts, args = getopt.getopt(argv,"hf:5:3:s:g:t:y:r:o:we:", ["help", "file_dir=", "five_prime_ID=", "three_prime_ID=", "sort_mode=", "gene-model=", "text-of-expression=", "y-mode=", "range=", "output-dir=", "write-to-screen=", "expression-table="])
        #print(opts, args)

    except getopt.GetoptError:
        usage()
        sys.exit(0)

    for opt, arg in opts:
        if opt in ("-h","--help"):
            usage()
            sys.exit(1)
        elif opt in ("-f", "--file_dir"):
            global file_dir
            file_dir = arg
        elif opt in ("-5", "--five_p_gene_ID"):
            global five_prime_ID
            five_prime_ID = arg
        elif opt in ("-3", "--three_p_gene_ID"):
            global three_prime_ID
            three_prime_ID = arg
        elif opt in ("-s", "--sort_mode"):
            global sort_mode
            sorGt_mode = int(arg)
        elif opt in ("-o", "--output-dir"):
            global outputDir
            outputDir = arg
        elif opt in ("-g", "--gene-model"):
            global gene_model
            gene_model = arg
        elif opt in ("-y", "--y-mode"):
            global y_mode
            y_mode = arg
        elif opt in ("-t", "--text-of-expression"):
            global exp_text
            exp_text = arg
        elif opt in ("-r", "--range"):
            global max_value
            max_value = arg
        elif opt in ("-w", "--write-to-screen"):
            global write_sort
            write_sort = True
        elif opt in ("-e", "--expression-table"):
            global exp_table
            exp_table = arg

trans_gene_dict = {}
gene_name_dict = {}

def set_trans_gene_dict():
    path, filename = os.path.split(outputDir)
    dict_file=path +'/tmp/dict.txt'
    if not os.path.exists(dict_file):
        f=open(gene_model, "r")
        line=f.readline()
        while True:
            line=f.readline()
            if line=="":
                break
            if line[0]=="#":
                continue
            else:
                tmp=line.split("\t")
                tmp2=tmp[8].split(" ")
                isT=False
                isG=False
                isN=False
                tt=''
                gg=''
                nn=''
                for x in range(len(tmp2)):
                    if tmp2[x]=='gene_id':
                        isG=True
                        continue
                    if tmp2[x]=='transcript_id':
                        isT=True
                        continue
                    if tmp2[x]=='gene_name':
                        isN=True
                        continue
                    if isG:
                        gg=rm_quoat(tmp2[x])
                        isG=False
                    if isT:
                        tt=rm_quoat(tmp2[x])
                        isT=False
                    if isN:
                        nn=rm_quoat(tmp2[x])
                        isN=False
                if tt!='' and gg!='':
                     trans_gene_dict[tt]=gg
                if gg!='' and nn!='':
                     gene_name_dict[gg]=nn
        f.close()
        f=open(dict_file, "w")
        for x in trans_gene_dict:
            f.write("%s\t%s\t%s\n" % (gene_name_dict[trans_gene_dict[x]],x,trans_gene_dict[x]))
        f.close()
    else:
        f=open(dict_file, "r")
        while True:
            line=f.readline()
            if line=="":
                break
            else:
                tmp=line.split("\t")
                trans_gene_dict[tmp[1]]=tmp[2][0:len(tmp[2])-1]
                gene_name_dict[tmp[2][0:len(tmp[2])-1]]=tmp[0]
        f.close()
def ID_to_name(gene_ID):
    return gene_name_dict[gene_ID]

def main(argv):
    #print "0000 time is 0"
    t=time.time()
    getParameters(argv[1:])

    set_trans_gene_dict()

    five_prime_gene_name = ID_to_name(five_prime_ID)
    three_prime_gene_name = ID_to_name(three_prime_ID)
    
    #print "AAAA time=",time.time()-t,"seconds"
    #t=time.time()
    
    global sort_mode
    if (sort_mode == 0):
        if (three_prime_gene_name in gene_list.oncogene_list):
            sort_mode = 3
        if (five_prime_gene_name in gene_list.tumor_suppressor_list):
            sort_mode = 5
        if (five_prime_gene_name in gene_list.tumor_suppressor_list and three_prime_gene_name in gene_list.oncogene_list):
            sort_mode = 0
        
    #print "BBBB time=",time.time()-t,"seconds"
    #t=time.time()

    path, filename = os.path.split(outputDir)
    pd_file=path+"/tmp/pd_matrix."+five_prime_ID+"."+three_prime_ID+".tsv"
    pd_matrix = open(pd_file,"w+")

    #print "CCCC time=",time.time()-t,"seconds"
    #t=time.time()

    #
    exp_dict_5 = {}
    five_prime_exp_line = subprocess.check_output("grep %s %s" % (five_prime_ID, exp_table), shell = True).rstrip('\n')
    five_prime_exp_line = five_prime_exp_line.split("\t")
    five_prime_exp_line.pop(0)
    sample_list = subprocess.check_output("head -1 %s" % (exp_table), shell = True)
    sample_list = sample_list[1:]
    sample_list = (sample_list.rstrip('\n')).split("\t")
    for x in range(len(sample_list)):
        exp_dict_5[sample_list[x]]=five_prime_exp_line[x]

    exp_dict_3 = {}
    three_prime_exp_line = subprocess.check_output("grep %s %s" % (three_prime_ID, exp_table), shell = True).rstrip('\n')
    three_prime_exp_line=three_prime_exp_line.split("\t")
    three_prime_exp_line.pop(0)
    for x in range(len(sample_list)):
        exp_dict_3[sample_list[x]]=three_prime_exp_line[x]  

    # read in data
    input_file=open(file_dir,"r")
    input_file.readline()
    while True:
        line = input_file.readline()
        if line == '':
            break
        else:
            tmp = line.split("\t")
            tmp_stripped = []
            for i in tmp:
                tmp_stripped.append(i.rstrip('\n'))
            tmp = tmp_stripped
            sample_name = tmp[0]
            tumor = tmp[1]
            fusion = tmp[2]
            five_prime_exp=exp_dict_5[sample_name]
            three_prime_exp=exp_dict_3[sample_name]
            if five_prime_exp == '' or three_prime_exp == '':
                continue
            pd_matrix.write(sample_name + "\t" + tumor + "\t" + fusion + "\t" + three_prime_exp + "\t" + five_prime_exp + "\n")
    input_file.close()

    pd_matrix.close()

    #print "DDDD time=",time.time()-t,"seconds"
    #t=time.time()    

    #print("visualizing data..")
    pd.visualize(pd_file, five_prime_gene_name, three_prime_gene_name, sort_mode, outputDir, exp_text, y_mode, max_value, write_sort)
    
    #print "EEEE time=",time.time()-t,"seconds"
    #t=time.time()

if __name__ == '__main__':
    sys.exit(main(sys.argv))

