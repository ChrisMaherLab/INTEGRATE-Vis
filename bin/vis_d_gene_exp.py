import sys
import os
import math
import getopt
from subprocess import Popen, PIPE, STDOUT
import time

prefix_usage = "vis_d_gene_exp"

def usage():
    print
    print "    "+prefix_usage+" -b <fusions.bedpe> -s <sample-name> -d <ideogram.txt> -r <reference.fasta> -g <genes.gtf>"
    print """
    Requested parameters:

        -f/--fusion-matrix      [string:    path to tsv file generated by pd_fusion_converter.py     ]
       
        -e/--expression-matrix  [string:    path to tsv file generated by pd_expression_converter.py ]

        -g/--gene-model         [string:    path to GTF gene file                                    ]

        -t/--type-file          [string:    path to tsv file with sample name and is_tumor           ] 

    Optional parameters:

        -o/--output-dir         [string:    output directory.         Default: current directory     ]

        -k/--keep-tmp           [      :    keep tmp directory.       Default: not keeping tmp       ]

        -c/--cohort-name        [string:    cohort name               Default: "cohort"              ]

        -m/--metric-expresion   [string:    such as FPKM, TPM, etc.   Default: "Expression"          ]

        -y/--y-mode             [string:    independent or dependent  Default:  "independent"        ]
  
        -r/--range              [number:    max number of range to plot                              ]

    Version:                1.0.0
          """

#parameters
fusion_mat_file = ''
exp_mat_file = ''
output_dir = ''
is_rm_tmp=True
cohort_name = ''
type_file= ''
gene_model = ''
cur = ''
exp_text = ''
max_value = 0.0

def setDefault():
    global output_dir
    output_dir = './'
    global cohort_name
    cohort_name="cohort"
    exp_text = 'Expression'
    global y_mode
    y_mode = 'independent'
    global max_value
    max_value = -10000.0

def use_real_path():
    global output_dir
    output_dir=os.path.realpath(output_dir);
    global gene_model
    gene_model=os.path.realpath(gene_model)    
    global exp_mat_file
    exp_mat_file=os.path.realpath(exp_mat_file)

def initialSetupFile():
    global cur
    cur=os.path.dirname(os.path.abspath(__file__))

def getParameters(argv):
    try:
        opts, args = getopt.getopt(argv,"hkf:e:c:t:g:m:y:r:o:",["help",
                                                                "keep-tmp",
                                                                "fusion-matrix=",
                                                                "expression-matrix=",
                                                                "cohort-name=",
                                                                "type-file=",
                                                                "metric-expression=",
                                                                "gene-model=",
                                                                "y-mode=",
                                                                "range=",
                                                                "output-dir="])
    except getopt.GetoptError:
        usage()
        sys.exit(1)
    for opt, arg in opts:
        #if opt in ("-h","--help"):
        #    usage()
        if opt in ("-k","--keep-tmp"):
            global is_rm_tmp
            is_rm_tmp = False
        elif opt in ("-f", "--fusion-matrix"):
            global fusion_mat_file
            fusion_mat_file = arg
        elif opt in ("-e", "--expression-matrix"):
            global exp_mat_file
            exp_mat_file = arg
        elif opt in ("-c", "--cohort-name"):
            global cohort_name
            cohort_name = arg
        elif opt in ("-t", "--type-file"):
            global type_file
            type_file = arg
        elif opt in ("-g", "--gene-model"):
            global gene_model
            gene_model = arg      
        elif opt in ("-m", "--metric-expression"):
            global exp_text
            exp_text = arg
        elif opt in ("-y", "--y-mode"):
            global y_mode
            y_mode = arg
        elif opt in ("-r", "--range"):
            global max_value
            max_value = arg
        elif opt in ("-o", "--output-dir"):
            global output_dir
            output_dir = arg

def make_dir(path):
    if not os.path.exists(path):
        os.mkdir( path, 0775 )

def remove_tmp():
    if is_rm_tmp:
        cmd = 'rm -rf ' + output_dir +'/tmp'

sample_list = []
type_list = []
fusion_list = []

def get_sample_list_from_exp_mat():
    f=open(exp_mat_file, "r")
    line=f.readline()
    line=line[1:]
    global sample_list
    sample_list=line.split("\t")
    tmp=sample_list[len(sample_list)-1]
    tmp=tmp[0:len(tmp)-1]
    sample_list[len(sample_list)-1]=tmp
    f.close()

def plot_one(id1,id2,fusion_name):
    #create file for a gene
    t=time.time()
    f=open(type_file,"r")
    line=f.readline()
    tmp_dic = {}
    while True:
        line=f.readline()
        if line=="":
            break
        else:
           tmp=line.split("\t")
           if int(tmp[1])==1:
               tmp_dic[tmp[0]]=1
    f.close()
    global type_list
    type_list=[]
    for x in sample_list:
        if x in tmp_dic:
            type_list.append("1")
        else:
            type_list.append("0")
    pd_file=output_dir+"/tmp/"+cohort_name+"."+id1+"."+id2+".tsv"
    f2=open(pd_file,"w")
    f2.write("%s\t%s\t%s\n" % ("sample name","tumor","fusion"))
    for x in range(len(sample_list)):
        f2.write("%s\t%s\t%s\n" % (sample_list[x],type_list[x],fusion_list[x]))
    f2.close()
    #run pd.py
    cmd = 'python '+cur+'/pd.py -f '+pd_file+' -e '+exp_mat_file+' -5 '+id1+' -3 '+id2+' -s 0 -g '+gene_model+' -y '+y_mode+' -r '+str(max_value)+' -t "'+exp_text+'" -o '+output_dir+"/"+cohort_name+"."+fusion_name+".cohort.pdf"
    print "Command:    ",cmd
    p = Popen(cmd, cwd=output_dir, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
    output = p.stdout.read()
    if len(output)>0:
        print output
    print "Time elapsed:", ("%0.2f" % (time.time()-t)), "seconds"
    print 

id_id_sample_fusion_dict = {}

def plot_all():
    #load fusion matrix
    f=open(fusion_mat_file,"r")
    line=f.readline()
    line=line[1:]
    line=line.split("\t")
    line.pop(0)
    line.pop(0)
    f_sample_list=line
    while True:
        line=f.readline()
        if line=='':
            break
        else:
            tmp=line.split("\t")
            id1=tmp[1]
            id2=tmp[2]
            tmp.pop(0)
            tmp.pop(0)
            tmp.pop(0)
            values=tmp
            for t in range(len(f_sample_list)):
                if values[t]=="1":
                    id_id_sample_fusion_dict[id1+"__"+id2+"__"+f_sample_list[t]]=1
    f.close()
    f=open(fusion_mat_file,"r")
    line=f.readline()
    while True:
        line=f.readline()
        if line=='':
            break
        else:
            tmp=line.split("\t")
            fusion_name=tmp[0]
            id1=tmp[1]
            id2=tmp[2]
            global fusion_list
            fusion_list = [] 
            for x in sample_list:
                if id1+"__"+id2+"__"+x in id_id_sample_fusion_dict:
                    fusion_list.append("1")
                else:
                    fusion_list.append("0")
            plot_one(id1,id2,fusion_name)
    f.close()        

def main(argv):
    t=time.time()
    setDefault()
    initialSetupFile()
    if len(argv)>1 and argv[1]=="gene-exp":
        global prefix_usage
        prefix_usage="Integrate-vis gene-exp"
        if(len(argv)==2):
            usage()
            return
        getParameters(argv[2:])
    else:
        getParameters(argv[1:])
    if fusion_mat_file=='' or exp_mat_file=='' or type_file=='':
        usage()
        exit(1);
    print "[Cohort] Running Integrate-vis gene-exp on",
    print cohort_name,"..."
    use_real_path()
    make_dir(output_dir)
    make_dir(output_dir+'/tmp')
    get_sample_list_from_exp_mat()
    print "[Cohort] Plotting gene partner expression in cohort..."
    plot_all() 
    remove_tmp()
    print "[Cohort] Time elapsed:", ("%0.2f" % (time.time()-t)), "seconds"

if __name__ == '__main__':
    sys.exit(main(sys.argv))
